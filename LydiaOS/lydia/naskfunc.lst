     1 00000000                                 ; LydiaOS 核心汇编函数库
     2 00000000                                 ; 提供系统底层硬件访问接口、中断处理和内存管理功能
     3 00000000                                 ; TAB=4
     4 00000000                                 
     5 00000000                                 [FORMAT "WCOFF"]				; COFF目标文件格式
     6 00000000                                 [INSTRSET "i486p"]			; 486处理器指令集
     7 00000000                                 [BITS 32]					; 32位代码
     8 00000000                                 [FILE "naskfunc.nas"]		; 源文件名
     9 00000000                                 
    10 00000000                                 ; ===== 全局函数声明 =====
    11 00000000                                 ; I/O操作函数
    12 00000000                                 		GLOBAL	_io_hlt, _io_cli, _io_sti, _io_stihlt
    13 00000000                                 		GLOBAL	_io_in8,  _io_in16,  _io_in32
    14 00000000                                 		GLOBAL	_io_out8, _io_out16, _io_out32
    15 00000000                                 
    16 00000000                                 ; 系统寄存器操作
    17 00000000                                 		GLOBAL	_io_load_eflags, _io_store_eflags
    18 00000000                                 		GLOBAL	_load_gdtr, _load_idtr
    19 00000000                                 		GLOBAL	_load_cr0, _store_cr0
    20 00000000                                 		GLOBAL	_load_tr
    21 00000000                                 
    22 00000000                                 ; 中断处理程序包装器
    23 00000000                                 		GLOBAL	_asm_inthandler20, _asm_inthandler21
    24 00000000                                 		GLOBAL	_asm_inthandler2c, _asm_inthandler0c
    25 00000000                                 		GLOBAL	_asm_inthandler0d, _asm_end_app
    26 00000000                                 
    27 00000000                                 ; 内存和应用程序管理
    28 00000000                                 		GLOBAL	_memtest_sub
    29 00000000                                 		GLOBAL	_farjmp, _farcall
    30 00000000                                 		GLOBAL	_asm_hrb_api, _start_app
    31 00000000                                 
    32 00000000                                 ; ===== 外部函数声明 =====
    33 00000000                                 		EXTERN	_inthandler20, _inthandler21
    34 00000000                                 		EXTERN	_inthandler2c, _inthandler0d
    35 00000000                                 		EXTERN	_inthandler0c
    36 00000000                                 		EXTERN	_hrb_api
    37 00000000                                 
    38                                          [SECTION .text]
    39 00000000                                 
    40 00000000                                 ; ===== CPU控制函数 =====
    41 00000000                                 
    42 00000000                                 _io_hlt:	; void io_hlt(void) - CPU休眠等待中断
    43 00000000 F4                              		HLT
    44 00000001 C3                              		RET
    45 00000002                                 
    46 00000002                                 _io_cli:	; void io_cli(void) - 禁用中断
    47 00000002 FA                              		CLI
    48 00000003 C3                              		RET
    49 00000004                                 
    50 00000004                                 _io_sti:	; void io_sti(void) - 启用中断
    51 00000004 FB                              		STI
    52 00000005 C3                              		RET
    53 00000006                                 
    54 00000006                                 _io_stihlt:	; void io_stihlt(void) - 启用中断并休眠
    55 00000006 FB                              		STI
    56 00000007 F4                              		HLT
    57 00000008 C3                              		RET
    58 00000009                                 
    59 00000009                                 ; ===== 端口I/O函数 =====
    60 00000009                                 
    61 00000009                                 _io_in8:	; int io_in8(int port) - 读取8位端口数据
    62 00000009 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    63 0000000D B8 00000000                     		MOV		EAX,0
    64 00000012 EC                              		IN		AL,DX
    65 00000013 C3                              		RET
    66 00000014                                 
    67 00000014                                 _io_in16:	; int io_in16(int port) - 读取16位端口数据
    68 00000014 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    69 00000018 B8 00000000                     		MOV		EAX,0
    70 0000001D 66 ED                           		IN		AX,DX
    71 0000001F C3                              		RET
    72 00000020                                 
    73 00000020                                 _io_in32:	; int io_in32(int port) - 读取32位端口数据
    74 00000020 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    75 00000024 ED                              		IN		EAX,DX
    76 00000025 C3                              		RET
    77 00000026                                 
    78 00000026                                 _io_out8:	; void io_out8(int port, int data) - 写入8位端口数据
    79 00000026 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    80 0000002A 8A 44 24 08                     		MOV		AL,[ESP+8]		; data
    81 0000002E EE                              		OUT		DX,AL
    82 0000002F C3                              		RET
    83 00000030                                 
    84 00000030                                 _io_out16:	; void io_out16(int port, int data) - 写入16位端口数据
    85 00000030 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    86 00000034 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    87 00000038 66 EF                           		OUT		DX,AX
    88 0000003A C3                              		RET
    89 0000003B                                 
    90 0000003B                                 _io_out32:	; void io_out32(int port, int data) - 写入32位端口数据
    91 0000003B 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    92 0000003F 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    93 00000043 EF                              		OUT		DX,EAX
    94 00000044 C3                              		RET
    95 00000045                                 
    96 00000045                                 ; ===== 系统寄存器操作函数 =====
    97 00000045                                 
    98 00000045                                 _io_load_eflags:	; int io_load_eflags(void) - 读取标志寄存器
    99 00000045 9C                              		PUSHFD		
   100 00000046 58                              		POP		EAX
   101 00000047 C3                              		RET
   102 00000048                                 
   103 00000048                                 _io_store_eflags:	; void io_store_eflags(int eflags) - 设置标志寄存器
   104 00000048 8B 44 24 04                     		MOV		EAX,[ESP+4]
   105 0000004C 50                              		PUSH	EAX
   106 0000004D 9D                              		POPFD
   107 0000004E C3                              		RET
   108 0000004F                                 
   109 0000004F                                 _load_gdtr:		; void load_gdtr(int limit, int addr) - 加载全局描述符表寄存器
   110 0000004F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
   111 00000054 66 89 44 24 06                  		MOV		[ESP+6],AX
   112 00000059 0F 01 54 24 06                  		LGDT	[ESP+6]
   113 0000005E C3                              		RET
   114 0000005F                                 
   115 0000005F                                 _load_idtr:		; void load_idtr(int limit, int addr) - 加载中断描述符表寄存器
   116 0000005F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
   117 00000064 66 89 44 24 06                  		MOV		[ESP+6],AX
   118 00000069 0F 01 5C 24 06                  		LIDT	[ESP+6]
   119 0000006E C3                              		RET
   120 0000006F                                 
   121 0000006F                                 _load_cr0:		; int load_cr0(void) - 读取控制寄存器CR0
   122 0000006F 0F 20 C0                        		MOV		EAX,CR0
   123 00000072 C3                              		RET
   124 00000073                                 
   125 00000073                                 _store_cr0:		; void store_cr0(int cr0) - 设置控制寄存器CR0
   126 00000073 8B 44 24 04                     		MOV		EAX,[ESP+4]
   127 00000077 0F 22 C0                        		MOV		CR0,EAX
   128 0000007A C3                              		RET
   129 0000007B                                 
   130 0000007B                                 _load_tr:		; void load_tr(int tr) - 加载任务寄存器
   131 0000007B 0F 00 5C 24 04                  		LTR		[ESP+4]			; tr
   132 00000080 C3                              		RET
   133 00000081                                 
   134 00000081                                 ; ===== 中断处理程序包装器 =====
   135 00000081                                 
   136 00000081                                 _asm_inthandler20:	; 定时器中断处理包装器(IRQ0)
   137 00000081 06                              		PUSH	ES
   138 00000082 1E                              		PUSH	DS
   139 00000083 60                              		PUSHAD
   140 00000084 89 E0                           		MOV		EAX,ESP
   141 00000086 50                              		PUSH	EAX
   142 00000087 66 8C D0                        		MOV		AX,SS
   143 0000008A 8E D8                           		MOV		DS,AX
   144 0000008C 8E C0                           		MOV		ES,AX
   145 0000008E E8 [00000000]                   		CALL	_inthandler20
   146 00000093 58                              		POP		EAX
   147 00000094 61                              		POPAD
   148 00000095 1F                              		POP		DS
   149 00000096 07                              		POP		ES
   150 00000097 CF                              		IRETD
   151 00000098                                 
   152 00000098                                 _asm_inthandler21:	; 键盘中断处理包装器(IRQ1)
   153 00000098 06                              		PUSH	ES
   154 00000099 1E                              		PUSH	DS
   155 0000009A 60                              		PUSHAD
   156 0000009B 89 E0                           		MOV		EAX,ESP
   157 0000009D 50                              		PUSH	EAX
   158 0000009E 66 8C D0                        		MOV		AX,SS
   159 000000A1 8E D8                           		MOV		DS,AX
   160 000000A3 8E C0                           		MOV		ES,AX
   161 000000A5 E8 [00000000]                   		CALL	_inthandler21
   162 000000AA 58                              		POP		EAX
   163 000000AB 61                              		POPAD
   164 000000AC 1F                              		POP		DS
   165 000000AD 07                              		POP		ES
   166 000000AE CF                              		IRETD
   167 000000AF                                 
   168 000000AF                                 _asm_inthandler2c:	; 鼠标中断处理包装器(IRQ12)
   169 000000AF 06                              		PUSH	ES
   170 000000B0 1E                              		PUSH	DS
   171 000000B1 60                              		PUSHAD
   172 000000B2 89 E0                           		MOV		EAX,ESP
   173 000000B4 50                              		PUSH	EAX
   174 000000B5 66 8C D0                        		MOV		AX,SS
   175 000000B8 8E D8                           		MOV		DS,AX
   176 000000BA 8E C0                           		MOV		ES,AX
   177 000000BC E8 [00000000]                   		CALL	_inthandler2c
   178 000000C1 58                              		POP		EAX
   179 000000C2 61                              		POPAD
   180 000000C3 1F                              		POP		DS
   181 000000C4 07                              		POP		ES
   182 000000C5 CF                              		IRETD
   183 000000C6                                 
   184 000000C6                                 _asm_inthandler0c:	; 栈段错误异常处理包装器(INT 0x0C)
   185 000000C6 FB                              		STI
   186 000000C7 06                              		PUSH	ES
   187 000000C8 1E                              		PUSH	DS
   188 000000C9 60                              		PUSHAD
   189 000000CA 89 E0                           		MOV		EAX,ESP
   190 000000CC 50                              		PUSH	EAX
   191 000000CD 66 8C D0                        		MOV		AX,SS
   192 000000D0 8E D8                           		MOV		DS,AX
   193 000000D2 8E C0                           		MOV		ES,AX
   194 000000D4 E8 [00000000]                   		CALL	_inthandler0c
   195 000000D9 83 F8 00                        		CMP		EAX,0
   196 000000DC 0F 85 00000091                  		JNE		_asm_end_app
   197 000000E2 58                              		POP		EAX
   198 000000E3 61                              		POPAD
   199 000000E4 1F                              		POP		DS
   200 000000E5 07                              		POP		ES
   201 000000E6 83 C4 04                        		ADD		ESP,4			
   202 000000E9 CF                              		IRETD
   203 000000EA                                 
   204 000000EA                                 _asm_inthandler0d:	; 一般保护错误异常处理包装器(INT 0x0D)
   205 000000EA FB                              		STI
   206 000000EB 06                              		PUSH	ES
   207 000000EC 1E                              		PUSH	DS
   208 000000ED 60                              		PUSHAD
   209 000000EE 89 E0                           		MOV		EAX,ESP
   210 000000F0 50                              		PUSH	EAX
   211 000000F1 66 8C D0                        		MOV		AX,SS
   212 000000F4 8E D8                           		MOV		DS,AX
   213 000000F6 8E C0                           		MOV		ES,AX
   214 000000F8 E8 [00000000]                   		CALL	_inthandler0d
   215 000000FD 83 F8 00                        		CMP		EAX,0			
   216 00000100 75 71                           		JNE		_asm_end_app	; 如果返回非0，终止应用程序
   217 00000102 58                              		POP		EAX
   218 00000103 61                              		POPAD
   219 00000104 1F                              		POP		DS
   220 00000105 07                              		POP		ES
   221 00000106 83 C4 04                        		ADD		ESP,4		
   222 00000109 CF                              		IRETD
   223 0000010A                                 
   224 0000010A                                 ; ===== 内存测试函数 =====
   225 0000010A                                 
   226 0000010A                                 _memtest_sub:	; unsigned int memtest_sub(unsigned int start, unsigned int end)
   227 0000010A                                 				; 内存测试子程序，用于检测可用内存范围
   228 0000010A 57                              		PUSH	EDI					
   229 0000010B 56                              		PUSH	ESI
   230 0000010C 53                              		PUSH	EBX
   231 0000010D BE AA55AA55                     		MOV		ESI,0xaa55aa55			; pat0 = 0xaa55aa55 测试模式1
   232 00000112 BF 55AA55AA                     		MOV		EDI,0x55aa55aa			; pat1 = 0x55aa55aa 测试模式2
   233 00000117 8B 44 24 10                     		MOV		EAX,[ESP+12+4]			; i = start 起始地址
   234 0000011B                                 mts_loop:
   235 0000011B 89 C3                           		MOV		EBX,EAX
   236 0000011D 81 C3 00000FFC                  		ADD		EBX,0xffc				; p = i + 0xffc 指向块末尾
   237 00000123 8B 13                           		MOV		EDX,[EBX]				; old = *p 保存原始值
   238 00000125 89 33                           		MOV		[EBX],ESI				; *p = pat0 写入测试模式1
   239 00000127 83 33 FF                        		XOR		DWORD [EBX],0xffffffff	; *p ^= 0xffffffff 翻转所有位
   240 0000012A 3B 3B                           		CMP		EDI,[EBX]				; if (*p != pat1) goto fin 检查是否为预期值
   241 0000012C 75 18                           		JNE		mts_fin
   242 0000012E 83 33 FF                        		XOR		DWORD [EBX],0xffffffff	; *p ^= 0xffffffff 再次翻转
   243 00000131 3B 33                           		CMP		ESI,[EBX]				; if (*p != pat0) goto fin 检查是否恢复
   244 00000133 75 11                           		JNE		mts_fin
   245 00000135 89 13                           		MOV		[EBX],EDX				; *p = old 恢复原始值
   246 00000137 05 00001000                     		ADD		EAX,0x1000				; i += 0x1000 下一个4KB页
   247 0000013C 3B 44 24 14                     		CMP		EAX,[ESP+12+8]			; if (i <= end) goto mts_loop 检查是否到达结束
   248 00000140 76 D9                           		JBE		mts_loop
   249 00000142 5B                              		POP		EBX
   250 00000143 5E                              		POP		ESI
   251 00000144 5F                              		POP		EDI
   252 00000145 C3                              		RET
   253 00000146                                 mts_fin:
   254 00000146 89 13                           		MOV		[EBX],EDX				; *p = old 恢复原始值
   255 00000148 5B                              		POP		EBX
   256 00000149 5E                              		POP		ESI
   257 0000014A 5F                              		POP		EDI
   258 0000014B C3                              		RET
   259 0000014C                                 
   260 0000014C                                 ; ===== 远程跳转和调用函数 =====
   261 0000014C                                 
   262 0000014C                                 _farjmp:		; void farjmp(int eip, int cs) - 远程跳转
   263 0000014C FF 6C 24 04                     		JMP		FAR	[ESP+4]				; eip, cs
   264 00000150 C3                              		RET
   265 00000151                                 
   266 00000151                                 _farcall:		; void farcall(int eip, int cs) - 远程调用
   267 00000151 FF 5C 24 04                     		CALL	FAR	[ESP+4]				; eip, cs
   268 00000155 C3                              		RET
   269 00000156                                 
   270 00000156                                 ; ===== 应用程序API接口 =====
   271 00000156                                 
   272 00000156                                 _asm_hrb_api:	; HRB应用程序API调用包装器
   273 00000156 FB                              		STI
   274 00000157 1E                              		PUSH	DS
   275 00000158 06                              		PUSH	ES
   276 00000159 60                              		PUSHAD		
   277 0000015A 60                              		PUSHAD		
   278 0000015B 66 8C D0                        		MOV		AX,SS
   279 0000015E 8E D8                           		MOV		DS,AX
   280 00000160 8E C0                           		MOV		ES,AX
   281 00000162 E8 [00000000]                   		CALL	_hrb_api
   282 00000167 83 F8 00                        		CMP		EAX,0		
   283 0000016A 75 07                           		JNE		_asm_end_app
   284 0000016C 83 C4 20                        		ADD		ESP,32
   285 0000016F 61                              		POPAD
   286 00000170 07                              		POP		ES
   287 00000171 1F                              		POP		DS
   288 00000172 CF                              		IRETD
   289 00000173                                 
   290 00000173                                 _asm_end_app:	; 应用程序结束处理
   291 00000173 8B 20                           		MOV		ESP,[EAX]
   292 00000175 C7 40 04 00000000               		MOV		DWORD [EAX+4],0
   293 0000017C 61                              		POPAD
   294 0000017D C3                              		RET					
   295 0000017E                                 
   296 0000017E                                 _start_app:		; void start_app(int eip, int cs, int esp, int ds, int *tss_esp0)
   297 0000017E                                 				; 启动用户应用程序
   298 0000017E 60                              		PUSHAD		
   299 0000017F 8B 44 24 24                     		MOV		EAX,[ESP+36]	; eip
   300 00000183 8B 4C 24 28                     		MOV		ECX,[ESP+40]	; cs
   301 00000187 8B 54 24 2C                     		MOV		EDX,[ESP+44]	; esp
   302 0000018B 8B 5C 24 30                     		MOV		EBX,[ESP+48]	; ds
   303 0000018F 8B 6C 24 34                     		MOV		EBP,[ESP+52]	; tss_esp0
   304 00000193 89 65 00                        		MOV		[EBP  ],ESP		; 保存内核栈指针
   305 00000196 8C 55 04                        		MOV		[EBP+4],SS		; 保存内核栈段
   306 00000199 8E C3                           		MOV		ES,BX
   307 0000019B 8E DB                           		MOV		DS,BX
   308 0000019D 8E E3                           		MOV		FS,BX
   309 0000019F 8E EB                           		MOV		GS,BX
   310 000001A1                                 
   311 000001A1 83 C9 03                        		OR		ECX,3			; 设置用户特权级(CPL=3)
   312 000001A4 83 CB 03                        		OR		EBX,3		    ; 设置用户特权级(CPL=3)
   313 000001A7 53                              		PUSH	EBX				; ss
   314 000001A8 52                              		PUSH	EDX			    ; esp
   315 000001A9 51                              		PUSH	ECX			    ; cs
   316 000001AA 50                              		PUSH	EAX		        ; eip
   317 000001AB CB                              		RETF					; 返回到用户态
