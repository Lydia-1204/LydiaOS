     1 00000000                                 ; naskfunc
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]				
     5 00000000                                 [INSTRSET "i486p"]				
     6 00000000                                 [BITS 32]						
     7 00000000                                 [FILE "naskfunc.nas"]			
     8 00000000                                 		GLOBAL	_io_hlt, _io_cli, _io_sti, _io_stihlt
     9 00000000                                 		GLOBAL	_io_in8,  _io_in16,  _io_in32
    10 00000000                                 		GLOBAL	_io_out8, _io_out16, _io_out32
    11 00000000                                 		GLOBAL	_io_load_eflags, _io_store_eflags
    12 00000000                                 		GLOBAL	_load_gdtr, _load_idtr
    13 00000000                                 		GLOBAL	_load_cr0, _store_cr0
    14 00000000                                 		GLOBAL	_load_tr
    15 00000000                                 		GLOBAL	_asm_inthandler20, _asm_inthandler21
    16 00000000                                 		GLOBAL	_asm_inthandler2c, _asm_inthandler0c
    17 00000000                                 		GLOBAL	_asm_inthandler0d, _asm_end_app
    18 00000000                                 		GLOBAL	_memtest_sub
    19 00000000                                 		GLOBAL	_farjmp, _farcall
    20 00000000                                 		GLOBAL	_asm_hrb_api, _start_app
    21 00000000                                 		EXTERN	_inthandler20, _inthandler21
    22 00000000                                 		EXTERN	_inthandler2c, _inthandler0d
    23 00000000                                 		EXTERN	_inthandler0c
    24 00000000                                 		EXTERN	_hrb_api
    25 00000000                                 
    26                                          [SECTION .text]
    27 00000000                                 
    28 00000000                                 _io_hlt:	; void io_hlt(void);
    29 00000000 F4                              		HLT
    30 00000001 C3                              		RET
    31 00000002                                 
    32 00000002                                 _io_cli:	; void io_cli(void);
    33 00000002 FA                              		CLI
    34 00000003 C3                              		RET
    35 00000004                                 
    36 00000004                                 _io_sti:	; void io_sti(void);
    37 00000004 FB                              		STI
    38 00000005 C3                              		RET
    39 00000006                                 
    40 00000006                                 _io_stihlt:	; void io_stihlt(void);
    41 00000006 FB                              		STI
    42 00000007 F4                              		HLT
    43 00000008 C3                              		RET
    44 00000009                                 
    45 00000009                                 _io_in8:	; int io_in8(int port);
    46 00000009 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    47 0000000D B8 00000000                     		MOV		EAX,0
    48 00000012 EC                              		IN		AL,DX
    49 00000013 C3                              		RET
    50 00000014                                 
    51 00000014                                 _io_in16:	; int io_in16(int port);
    52 00000014 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    53 00000018 B8 00000000                     		MOV		EAX,0
    54 0000001D 66 ED                           		IN		AX,DX
    55 0000001F C3                              		RET
    56 00000020                                 
    57 00000020                                 _io_in32:	; int io_in32(int port);
    58 00000020 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    59 00000024 ED                              		IN		EAX,DX
    60 00000025 C3                              		RET
    61 00000026                                 
    62 00000026                                 _io_out8:	; void io_out8(int port, int data);
    63 00000026 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    64 0000002A 8A 44 24 08                     		MOV		AL,[ESP+8]		; data
    65 0000002E EE                              		OUT		DX,AL
    66 0000002F C3                              		RET
    67 00000030                                 
    68 00000030                                 _io_out16:	; void io_out16(int port, int data);
    69 00000030 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    70 00000034 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    71 00000038 66 EF                           		OUT		DX,AX
    72 0000003A C3                              		RET
    73 0000003B                                 
    74 0000003B                                 _io_out32:	; void io_out32(int port, int data);
    75 0000003B 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    76 0000003F 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    77 00000043 EF                              		OUT		DX,EAX
    78 00000044 C3                              		RET
    79 00000045                                 
    80 00000045                                 _io_load_eflags:	; int io_load_eflags(void);
    81 00000045 9C                              		PUSHFD		
    82 00000046 58                              		POP		EAX
    83 00000047 C3                              		RET
    84 00000048                                 
    85 00000048                                 _io_store_eflags:	; void io_store_eflags(int eflags);
    86 00000048 8B 44 24 04                     		MOV		EAX,[ESP+4]
    87 0000004C 50                              		PUSH	EAX
    88 0000004D 9D                              		POPFD		
    89 0000004E C3                              		RET
    90 0000004F                                 
    91 0000004F                                 _load_gdtr:		; void load_gdtr(int limit, int addr);
    92 0000004F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    93 00000054 66 89 44 24 06                  		MOV		[ESP+6],AX
    94 00000059 0F 01 54 24 06                  		LGDT	[ESP+6]
    95 0000005E C3                              		RET
    96 0000005F                                 
    97 0000005F                                 _load_idtr:		; void load_idtr(int limit, int addr);
    98 0000005F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    99 00000064 66 89 44 24 06                  		MOV		[ESP+6],AX
   100 00000069 0F 01 5C 24 06                  		LIDT	[ESP+6]
   101 0000006E C3                              		RET
   102 0000006F                                 
   103 0000006F                                 _load_cr0:		; int load_cr0(void);
   104 0000006F 0F 20 C0                        		MOV		EAX,CR0
   105 00000072 C3                              		RET
   106 00000073                                 
   107 00000073                                 _store_cr0:		; void store_cr0(int cr0);
   108 00000073 8B 44 24 04                     		MOV		EAX,[ESP+4]
   109 00000077 0F 22 C0                        		MOV		CR0,EAX
   110 0000007A C3                              		RET
   111 0000007B                                 
   112 0000007B                                 _load_tr:		; void load_tr(int tr);
   113 0000007B 0F 00 5C 24 04                  		LTR		[ESP+4]			; tr
   114 00000080 C3                              		RET
   115 00000081                                 
   116 00000081                                 _asm_inthandler20:
   117 00000081 06                              		PUSH	ES
   118 00000082 1E                              		PUSH	DS
   119 00000083 60                              		PUSHAD
   120 00000084 89 E0                           		MOV		EAX,ESP
   121 00000086 50                              		PUSH	EAX
   122 00000087 66 8C D0                        		MOV		AX,SS
   123 0000008A 8E D8                           		MOV		DS,AX
   124 0000008C 8E C0                           		MOV		ES,AX
   125 0000008E E8 [00000000]                   		CALL	_inthandler20
   126 00000093 58                              		POP		EAX
   127 00000094 61                              		POPAD
   128 00000095 1F                              		POP		DS
   129 00000096 07                              		POP		ES
   130 00000097 CF                              		IRETD
   131 00000098                                 
   132 00000098                                 _asm_inthandler21:
   133 00000098 06                              		PUSH	ES
   134 00000099 1E                              		PUSH	DS
   135 0000009A 60                              		PUSHAD
   136 0000009B 89 E0                           		MOV		EAX,ESP
   137 0000009D 50                              		PUSH	EAX
   138 0000009E 66 8C D0                        		MOV		AX,SS
   139 000000A1 8E D8                           		MOV		DS,AX
   140 000000A3 8E C0                           		MOV		ES,AX
   141 000000A5 E8 [00000000]                   		CALL	_inthandler21
   142 000000AA 58                              		POP		EAX
   143 000000AB 61                              		POPAD
   144 000000AC 1F                              		POP		DS
   145 000000AD 07                              		POP		ES
   146 000000AE CF                              		IRETD
   147 000000AF                                 
   148 000000AF                                 _asm_inthandler2c:
   149 000000AF 06                              		PUSH	ES
   150 000000B0 1E                              		PUSH	DS
   151 000000B1 60                              		PUSHAD
   152 000000B2 89 E0                           		MOV		EAX,ESP
   153 000000B4 50                              		PUSH	EAX
   154 000000B5 66 8C D0                        		MOV		AX,SS
   155 000000B8 8E D8                           		MOV		DS,AX
   156 000000BA 8E C0                           		MOV		ES,AX
   157 000000BC E8 [00000000]                   		CALL	_inthandler2c
   158 000000C1 58                              		POP		EAX
   159 000000C2 61                              		POPAD
   160 000000C3 1F                              		POP		DS
   161 000000C4 07                              		POP		ES
   162 000000C5 CF                              		IRETD
   163 000000C6                                 
   164 000000C6                                 _asm_inthandler0c:
   165 000000C6 FB                              		STI
   166 000000C7 06                              		PUSH	ES
   167 000000C8 1E                              		PUSH	DS
   168 000000C9 60                              		PUSHAD
   169 000000CA 89 E0                           		MOV		EAX,ESP
   170 000000CC 50                              		PUSH	EAX
   171 000000CD 66 8C D0                        		MOV		AX,SS
   172 000000D0 8E D8                           		MOV		DS,AX
   173 000000D2 8E C0                           		MOV		ES,AX
   174 000000D4 E8 [00000000]                   		CALL	_inthandler0c
   175 000000D9 83 F8 00                        		CMP		EAX,0
   176 000000DC 0F 85 00000091                  		JNE		_asm_end_app
   177 000000E2 58                              		POP		EAX
   178 000000E3 61                              		POPAD
   179 000000E4 1F                              		POP		DS
   180 000000E5 07                              		POP		ES
   181 000000E6 83 C4 04                        		ADD		ESP,4			
   182 000000E9 CF                              		IRETD
   183 000000EA                                 
   184 000000EA                                 _asm_inthandler0d:
   185 000000EA FB                              		STI
   186 000000EB 06                              		PUSH	ES
   187 000000EC 1E                              		PUSH	DS
   188 000000ED 60                              		PUSHAD
   189 000000EE 89 E0                           		MOV		EAX,ESP
   190 000000F0 50                              		PUSH	EAX
   191 000000F1 66 8C D0                        		MOV		AX,SS
   192 000000F4 8E D8                           		MOV		DS,AX
   193 000000F6 8E C0                           		MOV		ES,AX
   194 000000F8 E8 [00000000]                   		CALL	_inthandler0d
   195 000000FD 83 F8 00                        		CMP		EAX,0			
   196 00000100 75 71                           		JNE		_asm_end_app
   197 00000102 58                              		POP		EAX
   198 00000103 61                              		POPAD
   199 00000104 1F                              		POP		DS
   200 00000105 07                              		POP		ES
   201 00000106 83 C4 04                        		ADD		ESP,4			
   202 00000109 CF                              		IRETD
   203 0000010A                                 
   204 0000010A                                 _memtest_sub:	; unsigned int memtest_sub(unsigned int start, unsigned int end)
   205 0000010A 57                              		PUSH	EDI						
   206 0000010B 56                              		PUSH	ESI
   207 0000010C 53                              		PUSH	EBX
   208 0000010D BE AA55AA55                     		MOV		ESI,0xaa55aa55			; pat0 = 0xaa55aa55;
   209 00000112 BF 55AA55AA                     		MOV		EDI,0x55aa55aa			; pat1 = 0x55aa55aa;
   210 00000117 8B 44 24 10                     		MOV		EAX,[ESP+12+4]			; i = start;
   211 0000011B                                 mts_loop:
   212 0000011B 89 C3                           		MOV		EBX,EAX
   213 0000011D 81 C3 00000FFC                  		ADD		EBX,0xffc				; p = i + 0xffc;
   214 00000123 8B 13                           		MOV		EDX,[EBX]				; old = *p;
   215 00000125 89 33                           		MOV		[EBX],ESI				; *p = pat0;
   216 00000127 83 33 FF                        		XOR		DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
   217 0000012A 3B 3B                           		CMP		EDI,[EBX]				; if (*p != pat1) goto fin;
   218 0000012C 75 18                           		JNE		mts_fin
   219 0000012E 83 33 FF                        		XOR		DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
   220 00000131 3B 33                           		CMP		ESI,[EBX]				; if (*p != pat0) goto fin;
   221 00000133 75 11                           		JNE		mts_fin
   222 00000135 89 13                           		MOV		[EBX],EDX				; *p = old;
   223 00000137 05 00001000                     		ADD		EAX,0x1000				; i += 0x1000;
   224 0000013C 3B 44 24 14                     		CMP		EAX,[ESP+12+8]			; if (i <= end) goto mts_loop;
   225 00000140 76 D9                           		JBE		mts_loop
   226 00000142 5B                              		POP		EBX
   227 00000143 5E                              		POP		ESI
   228 00000144 5F                              		POP		EDI
   229 00000145 C3                              		RET
   230 00000146                                 mts_fin:
   231 00000146 89 13                           		MOV		[EBX],EDX				; *p = old;
   232 00000148 5B                              		POP		EBX
   233 00000149 5E                              		POP		ESI
   234 0000014A 5F                              		POP		EDI
   235 0000014B C3                              		RET
   236 0000014C                                 
   237 0000014C                                 _farjmp:		; void farjmp(int eip, int cs);
   238 0000014C FF 6C 24 04                     		JMP		FAR	[ESP+4]				; eip, cs
   239 00000150 C3                              		RET
   240 00000151                                 
   241 00000151                                 _farcall:		; void farcall(int eip, int cs);
   242 00000151 FF 5C 24 04                     		CALL	FAR	[ESP+4]				; eip, cs
   243 00000155 C3                              		RET
   244 00000156                                 
   245 00000156                                 _asm_hrb_api:
   246 00000156 FB                              		STI
   247 00000157 1E                              		PUSH	DS
   248 00000158 06                              		PUSH	ES
   249 00000159 60                              		PUSHAD		
   250 0000015A 60                              		PUSHAD		
   251 0000015B 66 8C D0                        		MOV		AX,SS
   252 0000015E 8E D8                           		MOV		DS,AX		
   253 00000160 8E C0                           		MOV		ES,AX
   254 00000162 E8 [00000000]                   		CALL	_hrb_api
   255 00000167 83 F8 00                        		CMP		EAX,0		
   256 0000016A 75 07                           		JNE		_asm_end_app
   257 0000016C 83 C4 20                        		ADD		ESP,32
   258 0000016F 61                              		POPAD
   259 00000170 07                              		POP		ES
   260 00000171 1F                              		POP		DS
   261 00000172 CF                              		IRETD
   262 00000173                                 _asm_end_app:
   263 00000173 8B 20                           		MOV		ESP,[EAX]
   264 00000175 C7 40 04 00000000               		MOV		DWORD [EAX+4],0
   265 0000017C 61                              		POPAD
   266 0000017D C3                              		RET					
   267 0000017E                                 
   268 0000017E                                 _start_app:		; void start_app(int eip, int cs, int esp, int ds, int *tss_esp0);
   269 0000017E 60                              		PUSHAD		
   270 0000017F 8B 44 24 24                     		MOV		EAX,[ESP+36]	
   271 00000183 8B 4C 24 28                     		MOV		ECX,[ESP+40]	
   272 00000187 8B 54 24 2C                     		MOV		EDX,[ESP+44]	
   273 0000018B 8B 5C 24 30                     		MOV		EBX,[ESP+48]	
   274 0000018F 8B 6C 24 34                     		MOV		EBP,[ESP+52]	
   275 00000193 89 65 00                        		MOV		[EBP  ],ESP		
   276 00000196 8C 55 04                        		MOV		[EBP+4],SS		
   277 00000199 8E C3                           		MOV		ES,BX
   278 0000019B 8E DB                           		MOV		DS,BX
   279 0000019D 8E E3                           		MOV		FS,BX
   280 0000019F 8E EB                           		MOV		GS,BX
   281 000001A1 83 C9 03                        		OR		ECX,3			
   282 000001A4 83 CB 03                        		OR		EBX,3		
   283 000001A7 53                              		PUSH	EBX				
   284 000001A8 52                              		PUSH	EDX			
   285 000001A9 51                              		PUSH	ECX				
   286 000001AA 50                              		PUSH	EAX				
   287 000001AB CB                              		RETF
